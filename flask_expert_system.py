# -*- coding: utf-8 -*-
"""Flask_Expert_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XvGqk4seAcG3jzLOpAFyLHNtiiKMwncu
"""


import expert_personal_finance as eps

from flask import Flask, request, jsonify, render_template
import pickle
import numpy as np
import pandas as pd
from flask_ngrok import run_with_ngrok

app = Flask(__name__)

@app.route("/")
def hello():
  return render_template('index.html')
  # return '<html lang="en" class="js-focus-visible" data-js-focus-visible=""><head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta http-equiv="X-UA-Compatible" content="ie=edge"> <title>Shop</title> <link rel="stylesheet" href="/css/main.css"> <script src="https://code.jquery.com/jquery-2.2.1.min.js" crossorigin="anonymous"></script> <style type="text/css"> @font-face { font-weight: 400; font-style:  normal; font-family: "Circular-Loom"; src: url("https://cdn.loom.com/assets/fonts/circular/CircularXXWeb-Book-cd7d2bcec649b1243839a15d5eb8f0a3.woff2") format("woff2"); } @font-face { font-weight: 500; font-style:  normal; font-family: "Circular-Loom"; src: url("https://cdn.loom.com/assets/fonts/circular/CircularXXWeb-Medium-d74eac43c78bd5852478998ce63dceb3.woff2") format("woff2"); } @font-face { font-weight: 700; font-style:  normal; font-family: "Circular-Loom"; src: url("https://cdn.loom.com/assets/fonts/circular/CircularXXWeb-Bold-83b8ceaf77f49c7cffa44107561909e4.woff2") format("woff2"); } @font-face { font-weight: 900; font-style:  normal; font-family: "Circular-Loom"; src: url("https://cdn.loom.com/assets/fonts/circular/CircularXXWeb-Black-bf067ecb8aa777ceb6df7d72226febca.woff2") format("woff2"); } @import url("https://fonts.googleapis.com/css?family=Open+Sans:400,700"); * { box-sizing: border-box; } body { padding: 0; margin: 0; font-family: "Open Sans", sans-serif; } main { padding: 1rem; margin: auto; } form { display: inline; } .centered { text-align: center; } .image { height: 20rem; } .image img { height: 100%; } .main-header { width: 100%; height: 3.5rem; background-color: #00695c; padding: 0 1.5rem; display: flex; align-items: center; } .main-header__nav { height: 100%; width: 100%; display: none; align-items: center; justify-content: space-between; } .main-header__item-list { list-style: none; margin: 0; padding: 0; display: flex; } .main-header__item { margin: 0 1rem; padding: 0; } .main-header__item a, .main-header__item button { font: inherit; background: transparent; border: none; text-decoration: none; color: white; cursor: pointer; } .main-header__item a:hover, .main-header__item a:active, .main-header__item a.active, .main-header__item button:hover, .main-header__item button:active { color: #ffeb3b; } .mobile-nav { width: 30rem; height: 100vh; max-width: 90%; position: fixed; left: 0; top: 0; background: white; z-index: 10; padding: 2rem 1rem 1rem 2rem; transform: translateX(-100%); transition: transform 0.3s ease-out; } .mobile-nav.open { transform: translateX(0); } .mobile-nav__item-list { list-style: none; display: flex; flex-direction: column; margin: 0; padding: 0; } .mobile-nav__item { margin: 1rem; padding: 0; } .mobile-nav__item a, .mobile-nav__item button { font: inherit; text-decoration: none; color: black; font-size: 1.5rem; padding: 0.5rem 2rem; background: transparent; border: none; cursor: pointer; } .mobile-nav__item a:active, .mobile-nav__item a:hover, .mobile-nav__item a.active, .mobile-nav__item button:hover, .mobile-nav__item button:active { background: #00695c; color: white; border-radius: 3px; } #side-menu-toggle { border: 1px solid white; font: inherit; padding: 0.5rem; display: block; background: transparent; color: white; cursor: pointer; } #side-menu-toggle:focus { outline: none; } #side-menu-toggle:active, #side-menu-toggle:hover { color: #ffeb3b; border-color: #ffeb3b; } .backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100vh; background: rgba(0, 0, 0, 0.5); z-index: 5; display: none; } .grid { display: flex; flex-wrap: wrap; justify-content: space-around; align-items: stretch; } .card { box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26); } .card__header, .card__content { padding: 1rem; } .card__header h1, .card__content h1, .card__content h2, .card__content p { margin: 0; } .card__image { width: 100%; } .card__image img { width: 100%; } .card__actions { padding: 1rem; text-align: center; } .card__actions button, .card__actions a { margin: 0 0.25rem; } .btn { display: inline-block; padding: 0.25rem 1rem; text-decoration: none; font: inherit; border: 1px solid #00695c; color: #00695c; background: white; border-radius: 3px; cursor: pointer; } .btn:hover, .btn:active { background-color: #00695c; color: white; } .btn.danger { color: red; border-color: red; } .btn.danger:hover, .btn.danger:active { background: red; color: white; } .user-message{ margin: auto; width: 90%; border: 1px solid #4771fa; padding: 0.5rem; border-radius: 3px; background: #a3b5f1; text-align: center; } .user-message--error{ border-color: red; background: rgb(248, 183, 183); color: red; } .user-message--success{ border-color: green; background: rgb(124, 231, 124); color: green; } .pagination { margin-top: 2rem; text-align: center; } .pagination a{ text-decoration: none; color: #00695c; padding: 0.5rem; border: 1px solid #00695c; margin: 0 1rem; } .pagination a:hover, .pagination a:active, .pagination a.active{ background-color: #00695c; color: white; } @media (min-width: 768px) { .main-header__nav { display: flex; } #side-menu-toggle { display: none; } .user-message{ width: 30rem; } } <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script> </style> </head> <body data-new-gr-c-s-check-loaded="14.1015.0" data-gr-ext-installed="" cz-shortcut-listen="true" style=""> <div class="backdrop"></div> <header class="main-header"> <button id="side-menu-toggle">Menu</button> <nav class="main-header__nav"> <center style=" margin: auto 669px; color: white; "> Welcome to the Flask version! </center> </nav> </header> <main> <div class="grid"> <article class="card product-item"> <header class="card__header"> <h1 class="product__title">Breast cancer prediction</h1> </header> <div class="card__content"> <p class="product__description">Upload a test file</p> </div> <div class="card__actions"> <form action="/predict_file" id="classify" method="POST" enctype="multipart/form-data"> <input type="file" style="margin: 42px 14px;" name="file"> <button class="btn" type="submit">Upload</button> </form> </div> <div class="card__content" id="result"> </div> </article> </div> </main> <script> $(document).ready(function(){ $("#classify").on("submit", function(e){ e.preventDefault(); var fd = new FormData(); var files = $("input[type=file]")[0].files[0]; fd.append("file",files); $.ajax({ url: "/predict_file", contentType: false, processData: false,data: fd, type: "POST", success: function(data){ $("#result").html(data); }, error: function(XMLHttpRequest, textStatus) { $("#result").html(`<p style="color: red" class="product__description">Some error</p>`); } }) }) }) </script> </body> </html>'

@app.route("/predict", methods=['POST'])
def predict():
  print("heredsdsdsd")
  age=int(request.form['age'])
  Income=int(request.form['income'])
  Food=int(request.form['food'])
  Rent=int(request.form['rent'])
  Health_insurance=int(request.form['health_insurance'])
  Bills_utilities=int(request.form['bills_utilities'])
  Transportation=int(request.form['transportation'])
  Basic_clothes=int(request.form['basic_clothes'])
  Vacations=int(request.form['vacations'])
  Trips=int(request.form['trips'])
  Expensive_clothes=int(request.form['expensive_clothes'])
  Consumer_electronics=int(request.form['consumer_electronics'])
  Dining_out=int(request.form['dining_out'])
  Entertainment=int(request.form['entertainment'])
  Hobbies=int(request.form['hobbies'])
  Real_estate=int(request.form['real_estate'])
  Stocks=int(request.form['stocks'])
  Mutual_funds=int(request.form['mutalfunds'])
  Pf_retirement=int(request.form['pf_retirement'])
  Fixed_deposit=int(request.form['fixed_deposit'])
  print("here",Consumer_electronics)
  finance = eps.finance_expert(age, Income, Food, Rent, Health_insurance, Bills_utilities, Transportation, Basic_clothes, Vacations, Trips, Expensive_clothes, Consumer_electronics, Dining_out, Entertainment, Hobbies, Real_estate, Stocks, Mutual_funds, Pf_retirement, Fixed_deposit)
  finance.int_to_category()
  print("here1")
  engine = eps.personalfinancemanagement()
  engine.reset()
  print("here11")
  engine.declare(eps.Fixed_depositcheck(fdcheck=finance.Fixed_deposit_category))
  engine.declare(eps.Pf_retirementcheck(pfrcheck=finance.Pf_retirement_category))
  engine.declare(eps.Mutalfundscheck(mulcheck=finance.Mutalfunds_category))
  engine.declare(eps.Stockscheck(stoccheck=finance.Stocks_category))
  engine.declare(eps.Real_estatecheck(realcheck=finance.Real_estate_category))
  engine.declare(eps.Hobbiescheck(hobcheck=finance.Hobbies_category))
  engine.declare(eps.Entertainmentcheck(entcheck=finance.Entertainment_category))
  engine.declare(eps.Dinig_outcheck(dincheck=finance.Dinig_out_category))
  engine.declare(eps.Consumer_electronicscheck(conecheck=finance.Consumer_electronics_category))
  engine.declare(eps.Expensive_clothescheck(expccheck=finance.Expensive_clothes_category))
  engine.declare(eps.Tripscheck(tripcheck=finance.Trips_category))
  engine.declare(eps.Vacationscheck(vaccheck=finance.Vacations_category))
  engine.declare(eps.Basic_clothescheck(bccheck=finance.Basic_clothes_category))
  engine.declare(eps.Transportationcheck(tcheck=finance.Transportation_category))
  engine.declare(eps.Bills_utilitiescheck(bcheck=finance.Bills_utilities_category))
  engine.declare(eps.Health_insurancecheck(hcheck=finance.Health_insurance_category))
  engine.declare(eps.Rentcheck(rcheck=finance.Rent_category))
  engine.declare(eps.Foodcheck(fcheck=finance.Food_category))
  engine.declare(eps.savecheck(scheck=finance.savings_category))
  engine.declare(eps.wantcheck(wcheck=finance.wants_category))
  engine.declare(eps.needcheck(ncheck=finance.needs_category))
  engine.declare(eps.Incomebase(inclas=finance.income_category))
  engine.declare(eps.planselection(age=finance.age_finance_category))
  print("here1111")
  out_str = ""
  for row in engine.run(generate=True):
    if type(row) == tuple:
      for in_row in range(0,len(row)):
        out_str = out_str + "JAINAM" + row[in_row] + "JAINAM"
    else:
      out_str = out_str + "JAINAM" + row
    out_str = out_str + " "
  # engine.age_junior
  
  print("here111111", out_str)
  return out_str

if __name__=='__main__':
  app.run()